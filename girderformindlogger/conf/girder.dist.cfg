[global]
server.socket_host = "127.0.0.1"
server.socket_port = 8080
server.thread_pool = 100
server.max_request_body_size = 209715200 # 200MB

[database]
uri = "mongodb://localhost:27017/girder"
replica_set = None

[server]
# Set to "production" or "development"
mode = "development"
api_root = "api/v1"
static_public_path = "/static"

# Disable the event daemon if you do not wish to run event handlers in a background thread.
# This may be necessary in certain deployment modes.
disable_event_daemon = False

[logging]
# log_root="/path/to/log/root"
# If log_root is set error and info will be set to error.log and info.log within
# log root respectively. The paths below will override that setting and are
# ABSOLUTE paths.
# error_log_file = "/path/to/error.log"
# info_log_file = "/path/to/info.log"
# log_access is a list of where http access requests are logged.  This may
# include "screen" (stdout) and "info" (the info_log_file).
# log_access = ["screen"]
# log_level is one of FATAL, CRITICAL, ERROR, WARN, WARNING, INFO, DEBUG, NOTSET
# log_level = "INFO"
# The size given by log_max_size may be in bytes or a string that ends with kb,
# Mb, or Gb.
# log_max_size = "1 Mb"
# log_backup_count = 5
# If log_quiet is True, nothing will be sent to stdout
# log_quiet = False
# The info log may include the log messages that are in the error log by
# changing its upper log level (the default is "INFO")
# log_max_info_level = "CRITICAL"

[users]
# Regular expression that passwords must match
password_regex = ".{6}.*"
# Text that will be presented to the user if their password fails the regex
password_description = "Password must be at least 6 characters."

[cache]
enabled = False
# Arguments to the global cache must be prefixed with cache.global.
# arguments are backend-specific, examples of existing cache backends can be found here:
# http://dogpilecache.readthedocs.io/en/latest/api.html#module-dogpile.cache.backends.memory
cache.global.backend = "dogpile.cache.memory"

# Arguments to the per-request cache must be prefixed with cache.request.
# per-request caching is meant to store data that will expire within the life cycle
# of one request, as a result it may contain sensitive information that could be leaked
# between requests if not cached correctly.
# Do not change this unless you know exactly what you're doing.
cache.request.backend = "cherrypy_request"

[sentry]
backend_dsn = "https://f63bc109e2ea4e618e036a9a0eb6dece@o414302.ingest.sentry.io/5313180"
