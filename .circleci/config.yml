---
version: 2

jobs:
  py3_serverInstall:
    docker:
      # This image uses the newest version of many dependencies
      - image: girder/girder_test:latest-py3
    environment:
      PIPENV_VENV_IN_PROJECT: true

    working_directory: /home/circleci/project  # as $CIRCLE_WORKING_DIRECTORY


    steps:
      - checkout:
          path: girderformindlogger
      - run:
          name: Generate python environment checksum file
          command: ./girderformindlogger/.circleci/generatePyEnvChecksum.sh > girderformindlogger/py-env-checksum
      - restore_cache:
          key: venv-py3.6-{{ arch }}-{{ checksum "girderformindlogger/py-env-checksum" }}
      - run:
          name: Create virtual environment (if necessary)
          command: if [ ! -d girder_env ]; then python3 -m venv girder_env; fi
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - run:
          name: Upgrade Python toolchain
          command: pip install --upgrade pip==20.2.4 setuptools==50.3.2
      - run:
          name: Install Girder
          command: pip install --upgrade --upgrade-strategy eager --editable .[sftp,mount] --editable clients/python --requirement requirements-dev.txt
          working_directory: girderformindlogger
      - run:
          name: Reduce workspace size
          command: |
            pyclean girderformindlogger
            pyclean girder_env
      - save_cache:
          paths: girder_env
          key: venv-py3.6-{{ arch }}-{{ checksum "girderformindlogger/py-env-checksum" }}
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - girderformindlogger
            - girder_env


  py3_integrationTests:
    machine: true
    working_directory: /home/circleci/project  # as $CIRCLE_WORKING_DIRECTORY

    steps:
      - checkout:
          path: girderformindlogger
      - run:
          name: Install NodeJS 10
          # CircleCI resets the Bash environment between every step, so any steps using node or npm
          # must first:
          #   source $NVM_DIR/nvm.sh
          command: |
            source $NVM_DIR/nvm.sh
            nvm install v10
            nvm alias default v10
      - run:
          # Technically, we should add the circleci user to the fuse group, log
          # out, and log back in for it to take effect.  This allows fuse to be
          # available to all users without requiring them to be in the fuse
          # group
          name: Allow access to /etc/fuse.conf by all users
          command: sudo chmod a+r /etc/fuse.conf
      - run:
          name: Get rid of existing versions of MongoDB
          command: sudo rm --force /etc/apt/sources.list.d/*mongo* && sudo apt-get remove mongodb-org mongodb-org-tools mongodb-org-shell mongodb-org-server mongodb-org-mongos || true
      - run:
          name: Install MongoDB
          command: |
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 4B7C549A058F8B6B
            echo "deb [arch=amd64] http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
            sudo apt update
            sudo apt install mongodb-org
      - run:
          # The "d3" npm package (required by some Girder plugins) has an optional dependency of
          # "canvas", which requires "node-gyp" to build. node-gyp strictly requires Python 2
          # (https://www.npmjs.com/package/node-gyp), so install it first before switching to
          # Python 3.
          name: Install node-gyp
          command: npm install --global node-gyp
      - run:
          name: Allow Boto to work with Python 3
          command: sudo rm --force /etc/boto.cfg
      - run:
          name: Set up Python 3.7
          command: |
             pyenv install 3.7.12 || true
             pyenv global 3.7.12
      - run:
          name: Create and activate virtual environment
          command: |
            python3.7 -m venv girderformindlogger
            . girderformindlogger/bin/activate
      - run:
          name: Upgrade Python toolchain
          command: pip install --upgrade wheel pip==20.2.4 setuptools==50.3.2
      - run:
          name: Install Girder plugin system dependencies
          command: sudo apt-get update
      - run:
          name: Install Girder with extras
          command: |
            set +e
            pip install -r requirements.txt
            pip install --upgrade --upgrade-strategy eager --editable .[sftp,mount] --editable clients/python --requirement requirements-dev.txt
            pip install -e .
          working_directory: girderformindlogger
      - run:
          name: Create Girder build directory
          command: mkdir girder_build
      - run:
          name: Install, build, run and test Girder for MindLogger
          command: >-
            pip install -e ./girderformindlogger &&
            girderformindlogger build &&
            girderformindlogger serve &
            sleep 300
            # &&
            # pytest ./girderformindlogger/test
            # --capture=no --cov=girderformindlogger
            # --cov-report html --cov-report xml
      - store_test_results:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      #- run:
      #    name: Install Codecov client
      #    command: pip install codecov
      #- run:
      #    name: Upload coverage
      #    command: codecov --disable search pycov gcov --root girderformindlogger --file /home/circleci/project/coverage.xml

  public_symbols:
    docker:
      - image: girder/girder_test:latest-py3
    working_directory: /home/circleci/project  # as $CIRCLE_WORKING_DIRECTORY
    steps:
      - checkout:
          path: girderformindlogger
      - run:
          name: Test public symbols
          command: tox -e public_names
          working_directory: girderformindlogger

  deploy:
    docker:
      - image: girder/girder_test:latest-py3
    working_directory: /home/circleci/project  # as $CIRCLE_WORKING_DIRECTORY
    steps:
      # This step depends on both "py2_coverage" and "py3_coverage", as it should only run when
      # everything succeeds. However, this means that "attach_workspace" cannot be used, as the
      # workspace will have conflicting coverage files from both.
      - checkout:
          path: girderformindlogger
      # Since this cache must have been created in a previous step of this workflow, we can get
      # a virtualenv without having to create one or install anything.
      - run:
          name: Generate python environment checksum file
          command: ./girderformindlogger/.circleci/generatePyEnvChecksum.sh > girderformindlogger/py-env-checksum
      - restore_cache:
          key: venv-py3.6-{{ arch }}-{{ checksum "girderformindlogger/py-env-checksum" }}
      - run:
          name: Activate virtual environment
          command: echo ". $CIRCLE_WORKING_DIRECTORY/girder_env/bin/activate" >> $BASH_ENV
      - run:
          name: Upload documentation to ESDoc
          command: curl 'https://doc.esdoc.org/api/create' -X POST --data-urlencode "gitUrl=git@github.com:girderformindlogger/girderformindlogger.git"
      - run:
          name: Deploy roles to Ansible Galaxy
          command: .circleci/galaxy_deploy.sh
          working_directory: girderformindlogger

workflows:
  version: 2
  test_all:
    jobs:
      - py3_serverInstall
      - py3_integrationTests:
          requires:
            - py3_serverInstall
